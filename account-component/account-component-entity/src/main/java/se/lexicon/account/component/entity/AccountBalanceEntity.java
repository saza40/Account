package se.lexicon.account.component.entity;

import com.gigaspaces.annotation.pojo.SpaceClass;
import com.gigaspaces.annotation.pojo.SpaceId;
import com.gigaspaces.annotation.pojo.SpaceRouting;
import se.lexicon.account.component.domain.Balance;
import com.so4it.annotation.Allowed;
import com.so4it.common.util.object.Required;
import com.so4it.component.entity.AbstractEntityBuilder;
import com.so4it.component.entity.IdEntity;

import java.time.Instant;
import java.util.Set;

/**
 *
 * @author Magnus Poromaa {@literal <mailto:magnus.poromaa@so4it.com/>}
 */
@SpaceClass
public class AccountBalanceEntity extends IdEntity<String> {

    //The unique id
    @Allowed(value = "Auto generated by GS", types = {Allowed.Type.NULLABLE})
    private String id;

    //The arrangement id of this account balance
    private String arrangementId;

    // Unique id for the posting
    private String batchId;

    // Timestamp from core system when update was made
    private Instant insertionTimestamp;

    //A set of all the registered balances for this arrangement
    private Set<Balance> balances;

    private AccountBalanceEntity() {
    }

    private AccountBalanceEntity(Builder builder) {
        this.arrangementId = Required.notNull(builder.arrangementId, "arrangementId", builder.isTemplate());
        this.batchId = Required.notNull(builder.batchId, "batchId", builder.isTemplate());
        this.insertionTimestamp = Required.notNull(builder.insertionTimestamp, "insertionTimestamp", builder.isTemplate());
        this.balances = builder.balances;
    }

    @Override
    @SpaceId(autoGenerate = true)
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @SpaceRouting
    public String getArrangementId() {
        return arrangementId;
    }

    private void setArrangementId(String arrangementId) {
        this.arrangementId = arrangementId;
    }

    public String getBatchId() {
        return batchId;
    }

    private void setBatchId(String batchId) {
        this.batchId = batchId;
    }

    public Instant getInsertionTimestamp() { return insertionTimestamp; }

    public void setInsertionTimestamp(Instant insertionTimestamp) { this.insertionTimestamp = insertionTimestamp; }

    public Set<Balance> getBalances() {
        return balances;
    }

    private void setBalances(Set<Balance> balances) {
        this.balances = balances;
    }

    public static Builder builder() {
        return new Builder(false);
    }

    public static Builder templateBuilder() {
        return new Builder(true);
    }


    public static class Builder extends AbstractEntityBuilder<AccountBalanceEntity> {

        private String id;

        private String arrangementId;

        private String batchId;

        private Instant insertionTimestamp;

        private Set<Balance> balances;

        public Builder(boolean template) {
            super(template);
        }

        public AccountBalanceEntity.Builder withId(String id) {
            this.id = id;
            return this;
        }

        public AccountBalanceEntity.Builder withArrangementId(String arrangementId) {
            this.arrangementId = arrangementId;
            return this;
        }

        public AccountBalanceEntity.Builder withBatchId(String batchId) {
            this.batchId = batchId;
            return this;
        }

        public AccountBalanceEntity.Builder withInsertionTimestamp(Instant insertionTimestamp) {
            this.insertionTimestamp = insertionTimestamp;
            return this;
        }

        public AccountBalanceEntity.Builder withBalances(Set<Balance> balances) {
            this.balances = balances;
            return this;
        }

        @Override
        public AccountBalanceEntity build() {
            return new AccountBalanceEntity(this);
        }
    }
}
